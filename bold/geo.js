{"_id":"_design/geo","_rev":"9-7254575ddce41d22132da49f8ced2a89","views":{"tile":{"reduce":"_sum","map":"function(doc) {\n  var tile_size = 256;\n  var pixels = 4;\n\n  if (doc.lat && doc.lon) {\n\n    for (var zoom = 0; zoom < 7; zoom++) {\n  \n    var x_pos = (parseFloat(doc.lon) + 180)/360 * Math.pow(2, zoom);\n    var x = Math.floor(x_pos);\n    \n    var relative_x = Math.round(tile_size * (x_pos - x));\n  \n    var y_pos = (1-Math.log(Math.tan(parseFloat (doc.lat)*Math.PI/180) + 1/Math.cos(parseFloat(doc.lat)*Math.PI/180))/Math.PI)/2 *Math.pow(2,zoom);\n    var y = Math.floor(y_pos);\n    var relative_y = Math.round(tile_size * (y_pos - y));\n  \n    relative_x = Math.floor(relative_x / pixels) * pixels;\n      relative_y = Math.floor(relative_y / pixels) * pixels;\n  \n    var tile = [];\n    tile.push(zoom);\n    tile.push(x);\n    tile.push(y);\n    tile.push(relative_x);\n    tile.push(relative_y);\n     \n    emit(tile, 1);\n    }\n  }\n}"},"tile_taxon":{"reduce":"_sum","map":"function(doc) {\n  var tile_size = 256;\n  var pixels = 4;\n  var max_zoom = 14;\n\n  if (doc.lat && doc.lon) {\n\n  for (var zoom = 0; zoom < max_zoom; zoom++) {\n\n    var x_pos = (parseFloat(doc.lon) + 180)/360 * Math.pow(2, zoom);\n    var x = Math.floor(x_pos);\n    \n    var relative_x = Math.round(tile_size * (x_pos - x));\n\n    var y_pos = (1-Math.log(Math.tan(parseFloat (doc.lat)*Math.PI/180) + 1/Math.cos(parseFloat(doc.lat)*Math.PI/180))/Math.PI)/2 *Math.pow(2,zoom);\n    var y = Math.floor(y_pos);\n    var relative_y = Math.round(tile_size * (y_pos - y));\n\n    relative_x = Math.floor(relative_x / pixels) * pixels;\n    relative_y = Math.floor(relative_y / pixels) * pixels;\n\n    // taxonomic group\n    var path = [];\n\n    var phylum = null;\n    if (doc.phylum_reg) {\n      phylum = doc.phylum_reg;\n    } \n    // API\n    if (doc.phylum_name) {\n      phylum = doc.phylum_name;\n    } \n    path.push(phylum);\n    \n    var class = null;\n    if (doc.class_reg) {\n      class = doc.class_reg;\n    } \n    // API\n    if (doc.class_name) {\n      class = doc.class_name;\n    } \n    path.push(class);\n    \n    var order = null;\n    if (doc.order_reg) {\n      order = doc.order_reg;\n    } \n    // API\n    if (doc.order_name) {\n      order = doc.order_name;\n    } \n    path.push(order);\n\n    var tile = [];\n    tile.push(zoom);\n    tile.push(x);\n    tile.push(y);\n\n    var path_length = path.length;\n    for (var j = 0; j < path_length; j++) {\n      tile.push(path[j]);\n      }\n\n    tile.push(relative_x);\n    tile.push(relative_y);\n     \n    emit(tile, 1);\n  }\n}\n}"},"tile_taxon_hit":{"reduce":"_sum","map":"function(doc) {\n  var tile_size = 256;\n  var pixels = 4;\n  var max_zoom = 14;\n\n  if (doc.lat && doc.lon) {\n\n  for (var zoom = 0; zoom < max_zoom; zoom++) {\n\n    var x_pos = (parseFloat(doc.lon) + 180)/360 * Math.pow(2, zoom);\n    var x = Math.floor(x_pos);\n    \n    var relative_x = Math.round(tile_size * (x_pos - x));\n\n    var y_pos = (1-Math.log(Math.tan(parseFloat (doc.lat)*Math.PI/180) + 1/Math.cos(parseFloat(doc.lat)*Math.PI/180))/Math.PI)/2 *Math.pow(2,zoom);\n    var y = Math.floor(y_pos);\n    var relative_y = Math.round(tile_size * (y_pos - y));\n\n    relative_x = Math.floor(relative_x / pixels) * pixels;\n    relative_y = Math.floor(relative_y / pixels) * pixels;\n\n    // taxonomic group\n    var path = [];\n\n   var phylum = null;\n    if (doc.phylum_reg) {\n      phylum = doc.phylum_reg;\n    } \n    // API\n    if (doc.phylum_name) {\n      phylum = doc.phylum_name;\n    } \n    path.push(phylum);\n    \n    var class = null;\n    if (doc.class_reg) {\n      class = doc.class_reg;\n    } \n    // API\n    if (doc.class_name) {\n      class = doc.class_name;\n    } \n    path.push(class);\n    \n    var order = null;\n    if (doc.order_reg) {\n      order = doc.order_reg;\n    } \n    // API\n    if (doc.order_name) {\n      order = doc.order_name;\n    } \n    path.push(order);\n\n    var tile = [];\n    tile.push(zoom);\n    tile.push(x);\n    tile.push(y);\n\n    // For path-based hit test we reverse order because we are searching\n    // for taxa within a specific pair of points\n    tile.push(relative_x);\n    tile.push(relative_y);\n\n    var path_length = path.length;\n    for (var j = 0; j < path_length; j++) {\n      tile.push(path[j]);\n      }\n\n     \n    emit(tile, 1);\n  }\n}\n}"}},"language":"javascript"}
